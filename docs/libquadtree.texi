\input texinfo 
@c Copyright (C) 2011-2012 Lokku ltd. and contributors
@c 
@c This program is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License as published by
@c the Free Software Foundation; either version 2 of the License, or
@c (at your option) any later version.
@c 
@c This program is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c 
@c You should have received a copy of the GNU General Public License along
@c with this program; if not, write to the Free Software Foundation, Inc.,
@c 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
@c 
@c ------------------------------------------------------------
@c 
@c This file is hand-written, but is used to generate:
@c          - Info file for the info(1) reader
@c          - HTML hyperlinked/single-page
@c          - PDF file
@c          - Postscript file
@c          - DVI file
@c
@c The manpage libquadtree.3 is completely seperate from this, and is also
@c hand-written. If you update something here, check the manpage as well.
@c 
@c There are a few things to note about this file:
@c    1) It can be much more detailed than the manpage, feel free to add new
@c       sections, chapters etc. Just keep things organized.
@c    2) Make good use of @cindex so people can quickly find things
@c    3) Use @node, it is essential for HTML/info navigation
@c    4) Use the surrounding code for a guide, but feel free to change things,
@c       the style is adhoc. For further info, the texinfo manual is a good
@c       resource:
@c
@c          http://www.gnu.org/software/texinfo/manual/texinfo/
@c
@c
@c
@setfilename libquadtree.info
@settitle libquadtree - Quadtree Library


@dircategory libquadtree - Quadtree Library
@direntry
* libquadtree: (libquadtree). A quadtree library
@end direntry

@titlepage
@sp 10
@center @titlefont{libquadtree - Quadtree Library}
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2012 Lokku ltd. and contributors
@end titlepage

@node Top, Introduction,,

@menu
* Introduction::     A brief summary of the library
* API::              A detailed description of the functions in the API
* Example::          An example program using the library
* Copyright::        Authors and copyright information
* Index::            This index has two entries.
@end menu

@contents

@node    Introduction, API, Top, Top
@chapter Introduction
@cindex Introduction
libquadtree is a fast implementation of a quadtree, a tree-like data structure
that allows for quick lookup of points in a two dimensional plane. The API is
presented below, with the functions roughly in the order they would typically
be used in.

This library is limited in several ways, in that all items must be inserted,
and the quadtree finalised, before querying is allowed. After being finalised,
items cannot be added or removed.

@node    API, Example, Introduction, Top
@cindex API
@chapter API

@section Function Index
@cindex qt_create_quadtree()
@subsection @code{UFQuadTree *qt_create_quadtree ();}
This function creates and returns an unfinished quadtree (UFQuadTree), with
which items can be added to, before it is finalised and ready for querying.
@deftypevar Quadrant *region
A quadrant of the form:

@example
struct Quadrant @{
  double ne[2];
  double sw[2];
@};
@end example
@end deftypevar

@deftypevar BUCKETSIZE maxfill
The maximum number of Items per bucket before a split is done, by further
subdividing the bucket into four smaller quadrants.
@end deftypevar

@cindex qt_insert()
@subsection @code{void qt_insert ();}
This function inserts an item into an unfinished quadtree created by
@code{qt_create_quadtree}(). It returns nothing.

@deftypevar UFQuadTree *quadtree
The unfinished quadtree, created by @code{qt_create_quadtree}(), in which insert
an item into.
@end deftypevar

@deftypevar const Item *item
The item to insert. Once inserted, the item can be free(3)'d immediately. Each
item has the following structure, where \fIcoords\fR represents an x and y
pair:
@example
   struct Item @{
     u_int64_t value;
     double coords[2];
   @};
@end example
@end deftypevar

@cindex qt_finalise()
@subsection @code{const QuadTree *qt_finalise ();}
This function finalises an unfinished quadtree, returning a Quadtree structure
that can be queried. The structure can optionally be written to a file, to be
read back later by @code{qt_load}(). Note that the UFQuadTree still uses memory,
until passed to @code{qtuf_free}().

@deftypevar const UFQuadTree *quadtree
The unfinished quadtree, created by @code{qt_create_quadtree}(), with all items
already inserted. Once finalised, the quadtree will be able to be queried, but
new items will not be able to be inserted.
@end deftypevar

@deftypevar const char *file
If not NULL, @emph{file} should specify a filename for the quadtree to be
written to. Note that the quadtree will be returned regardless of whether you
specify a filename, so you may wish to use @code{qt_free}() depending on your
usage scenario. 
@end deftypevar

@cindex qt_load()
@subsection @code{const QuadTree *qt_load ();}
This function loads a quadtree from a file previously written by
@code{qt_finalise}(), and returns that quadtree for use.

@deftypevar const char *file
The filename to load the quadtree from.
@end deftypevar

@cindex qt_query_ary()
@cindex qt_query_ary_fast()
@subsection @code{Item **qt_query_ary[_fast] ();}
This function is used to query items in a quadtree. It returns an array of
@emph{Item}s from a specified region in the quadtree, with an optional maximum.
The function makes no guarantees about the ordering and selection of items.

The two functions have similar functionality. The fast variant will run in less
time, but may return a worse selection of items.

@deftypevar const Quadtree *quadtree
The finalised quadtree to query.
@end deftypevar

@deftypevar const Quadrant *region
The region to look for items in. See the description of
@code{qt_create_quadtree} above, which shows the structure of a Quadrant.
@end deftypevar

@deftypevar u_int64_t *maxn
This specifies the maximum number of items to return. If 0, all items in the
quadrant are returned. Before returning, the number of items actually returned
(less or equal to the number of items requested) will be put into @emph{maxn}.
@end deftypevar

@cindex qt_query_itr()
@subsection @code{Qt_Iterator *qt_query_itr ();}
This function returns an iterator for a quadrant of a quadtree. The iterator
can be used to loop through each item in the quadrant, in no particular order.

@deftypevar const QuadTree *quadtree
The finalised quadtree to query.
@end deftypevar

@deftypevar const Quadrant *region
The quadrant that you wish to iterate through. See the description of
@code{qt_create_quadtree} above for a description of the Quadrant structure.
@end deftypevar

@cindex qt_itr_next()
@subsection @code{Item *qt_itr_next ();}
Returns a pointer to the next item from an iterator. Once called, the iterator
will be incremented. You can only go forward, and not backwards. After the last
item has been returned, the next call will return NULL. Once this happens, the
iterator will be free'd, and it is an error to call @code{qt_itr_next}() again
with the same iterator.

@deftypevar Qt_Iterator *itr
The iterator returned by a call to @code{qt_quer_itr}().
@end deftypevar

@cindex qtuf_free()
@subsection @code{void qtuf_free ();}
Free the memory allocated to an unfinished quadtree created by
@code{qt_create_quadtree}(). This function should be called after
@code{qt_finalise}(), which doesn't free its @emph{UFQuadTree} argument.

@deftypevar UFQuadTree *quadtree
The unfinished quadtree to free.
@end deftypevar

@cindex qt_free()
@subsection @code{void qt_free ();}
Free the memory allocated to a finished quadtree returned by 
@code{qt_finalise}(), or loaded by @code{qt_load}(). 

@deftypevar QuadTree *quadtree
The finished quadtree to free.
@end deftypevar


@node    Example, Copyright, API, Top
@cindex  Example
@chapter Example

@example
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <quadtree.h>

inline FLOAT rnd() @{
  return ((FLOAT)rand())/((FLOAT)RAND_MAX);
@}

int main(void) @{
   /* Set up quadrant */
   Quadrant quadrant;
   quadrant.ne[X] = 1;
   quadrant.ne[Y] = 1;
   quadrant.sw[X] = 0;
   quadrant.sw[Y] = 0;

   /* Create unfinalised quadtree with bucket size 200 */
   UFQuadTree *ufqt = qt_create_quadtree(&quadrant, 200);

   /* Populate with 500,000 items */
   int i;
   for (i=0; i<500000; i++) @{
      Item item;
      item.value = i;
      item.coords[0] = rnd();
      item.coords[1] = rnd();
      qt_insert(ufqt, &item);
   @}

   /* Finalise and write to a file */
   const QuadTree *qt = qt_finalise(ufqt, "_benchmark.dat");

   /* Free the unfinalised tree */
   qtuf_free(ufqt);

   /* Free the tree returned by qt_finalise */
   qt_free((QuadTree *)qt);

   /* Read the tree back in from the file */
   qt = qt_load("_benchmark.dat");

   /* Keep a total of queried items */
   u_int64_t total = 0;

   /* 10,000 queries */
   FLOAT radius = 1.0/64.0;
   for (i=0; i<10000; i++) @{
      /* Quadrant to query */
      Quadrant region;
      region.ne[X] = 1/2 + radius;
      region.ne[Y] = 1/2 + radius;
      region.sw[X] = 1/2 - radius;
      region.sw[Y] = 1/2 - radius;

      /* Return an unlimited number of items */
      u_int64_t maxn = 0;

      /* Query quadtree */
      Item **items = qt_query_ary_fast(qt, &region, &maxn);

      /* The number of items returned is put into maxn */
      total += maxn;

      /* Free memory */
      free(items);

      /* Change search radius */
      radius /= 2;
   @}

   printf("Queried a total of %lu items\\n", (unsigned  long)total);

   /* Free the tree */
   qt_free((QuadTree *)qt);

   return 0;
@}
@end example


@node    Copyright, Index, Example, Top
@cindex  Copyright
@chapter Copyright
Written at Lokku ltd <opensource@@lokku.com>

Copyright (C) 2011-2012 Lokku ltd. and contributors

License: GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.

@node    Index, , Copyright, Top
@unnumbered Index
@printindex cp

@bye
